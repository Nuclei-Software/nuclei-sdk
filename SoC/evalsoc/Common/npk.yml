## Package Base Information
## This npk.yml only works with Nuclei Studio 2023.10 or later
name: ssp-n100_sdk_evalsoc
owner: nuclei
description: Nuclei N100 EvalSoC Support Package
type: ssp
keywords:
  - soc
  - risc-v
  - nuclei
license: Apache-2.0
homepage: https://nucleisys.com/developboard.php#ddr200t

packinfo:
  core_vendor: Nuclei
  vendor: Nuclei
  name: Nuclei N100 FPGA Evaluation SoC
  doc:
    website: https://nucleisys.com/developboard.php#ddr200t # Website
    datasheet: https://nucleisys.com/developboard.php#ddr200t # SoC datasheet
    usermanual: https://nucleisys.com/developboard.php#ddr200t # User Manual
    extra:
      - uri: # file path or web link
        description: # description

## Package Dependency
dependencies:
  - name: csp-n100_sdk_nmsis
    version:

## Package Configurations
configuration:
  nuclei_core:
    default_value: n100
    type: choice
    global: true
    description: Nuclei RISC-V Core
    # tips introduced in Nuclei Studio 2023.10
    tips: "Select Nuclei Core to match basic RISC-V ARCH and ABI, used together with below Nuclei ARCH Extensions"
    choices:
      - name: n100
        arch: rv32ic
        abi: ilp32
        cmodel: medlow
        tune: nuclei-200-series
        description: N100 Core(ARCH=rv32ic, ABI=ilp32)
      - name: n100m
        arch: rv32imc
        abi: ilp32
        cmodel: medlow
        tune: nuclei-200-series
        description: N100M Core(ARCH=rv32imc, ABI=ilp32)
      - name: n100zmmul
        arch: rv32ic_zmmul
        abi: ilp32
        cmodel: medlow
        tune: nuclei-200-series
        description: N100ZMMUL Core(ARCH=rv32ic_zmmul, ABI=ilp32)
      - name: n100e
        arch: rv32ec
        abi: ilp32e
        cmodel: medlow
        tune: nuclei-200-series
        description: N100E Core(ARCH=rv32ec, ABI=ilp32e)
      - name: n100m
        arch: rv32imc
        abi: ilp32
        cmodel: medlow
        tune: nuclei-200-series
        description: N100EM Core(ARCH=rv32emc, ABI=ilp32e)
      - name: n100ezmmul
        arch: rv32ec_zmmul
        abi: ilp32e
        cmodel: medlow
        tune: nuclei-200-series
        description: N100EZMMUL Core(ARCH=rv32ec_zmmul, ABI=ilp32e)
  nuclei_archext:
    default_value: ""
    type: text
    # hints and tips are introduced in Nuclei Studio 2023.10
    # used to show tool tips and input hints
    tips: "Possible other ISA extensions, seperated by underscores, like '_zca_zcb_zcmp_zcmt'"
    hints: "_zca_zcb_zcmp_zcmt"
    global: true
    description: ARCH Extensions(ARCH_EXT=)
  semihost:
    default_value: 0
    type: checkbox
    tips: "If semihosting is enabled, c library stub source files will not be copied"
    description: Enable Semihosting
  stdclib:
    default_value: newlib_nano
    type: choice
    global: true
    tips: "Select proper c library, code size usage newlib_full > nuclei_nano > libncrt, libncrt only works for rv32"
    description: Standard C Library
    choices:
      - name: newlib_full
        description: newlib with full feature
      - name: newlib_fast
        description: newlib nano with printf/scanf float
      - name: newlib_small
        description: newlib nano with printf float
      - name: newlib_nano
        description: newlib nano without printf/scanf float
      - name: libncrt_fast
        description: nuclei c runtime library, optimized for speed
      - name: libncrt_balanced
        description: nuclei c runtime library, balanced, full feature
      - name: libncrt_small
        description: nuclei c runtime library, optimized for size, full feature
      - name: libncrt_nano
        description: nuclei c runtime library, optimized for size, no float support
      - name: libncrt_pico
        description: nuclei c runtime library, optimized for size, no long/long long support
      - name: nostd
        description: no std c library will be used, and don't search the standard system directories for header files
      - name: nospec
        description: no std c library will be used, not pass any --specs options
  linker_script:
    default_value: ""
    type: text
    # used as npk pass variable, not a global configuration
    global: false
    description: Alternative linker script

## Source Code Management
codemanage:
  installdir: evalsoc
  copyfiles:
    - path: ["Source/*.c", "Source/Drivers/*.c", "Source/GCC/", "Include/", "evalsoc.svd"]
    - path: ["Source/Stubs/newlib"]
      condition: $( startswith(${stdclib}, "newlib") && ${semihost} == 0 )
    - path: ["Source/Stubs/libncrt"]
      condition: $( startswith(${stdclib}, "libncrt") )
  incdirs:
    - path: ["Include/"]

## Set Configuration for other packages
setconfig:
  - config: nuclei_arch
    value: $(subst(${nuclei_core.arch},c,))${nuclei_archext}
    condition: $( contains(${nuclei_archext}, "zc"))
  - config: nuclei_arch
    value: ${nuclei_core.arch}${nuclei_archext}
    condition: $( ! contains(${nuclei_archext}, "zc"))
  - config: nmsislibarch
    value: ${nuclei_arch}

## Debug Configuration for this SoC
debugconfig:
  - type: openocd
    description: Nuclei OpenOCD
    svd: evalsoc.svd

  - type: jlink
    description: Segger Jlink
    svd: evalsoc.svd

## Build Configuration
buildconfig:
  - type: common
    common_flags: # flags need to be combined together across all packages
      - flags: -g -fno-common -ffunction-sections -fdata-sections -msave-restore
      - flags: -march=${nuclei_arch} -mabi=${nuclei_core.abi}
      - flags: -mcmodel=${nuclei_core.cmodel}
      - flags: -nostdinc
        condition: $( ${stdclib} == "nostd" )
      - flags:
        condition: $( ${stdclib} == "nospec" )
      - flags: -isystem=/include/libncrt
        condition: $( startswith(${stdclib}, "libncrt") )
      # For newlib nano, use system include newlib-nano
      - flags: -isystem=/include/newlib-nano
        condition: $( startswith(${stdclib}, "newlib") && ${stdclib} != "newlib_full" )
    ldflags:
      - flags: -nostartfiles -nodefaultlibs
      - flags: -lstdc++
        condition: $( startswith(${stdclib}, "newlib") )
      - flags: -lc -lgcc
        condition: $( ${stdclib} == "newlib_full" )
      - flags: -lc_nano -lgcc -u _printf_float -u _scanf_float
        condition: $( ${stdclib} == "newlib_fast" )
      - flags: -lc_nano -lgcc -u _printf_float
        condition: $( ${stdclib} == "newlib_small" )
      - flags: -l$(subst(${stdclib},lib,)) -lheapops_basic
        condition: $( startswith(${stdclib}, "libncrt") )
      - flags: -lfileops_semi
        condition: $( startswith(${stdclib}, "libncrt") && ${semihost} == 1 )
      - flags: -lfileops_uart
        condition: $( startswith(${stdclib}, "libncrt") && ${semihost} == 0 )
      - flags: -Wl,--gc-sections -Wl,--check-sections
    cflags:
    asmflags:
      - flags: -x assembler-with-cpp
    cxxflags:
    common_defines:
    prebuild_steps: # could be override by app/bsp type
      command:
      description:
    postbuild_steps: # could be override by app/bsp type
      command:
      description:

  - type: gcc
    description: Nuclei GNU Toolchain
    toolchain_name: RISC-V GCC/Newlib
    cross_prefix: riscv64-unknown-elf- # optional
    common_flags: # flags need to be combined together across all packages
      - flags: -mtune=${nuclei_core.tune}
        condition: $( ${nuclei_core.tune} != "" )
      # pass extra flags when zc extension enabled
      - flags: -fomit-frame-pointer -fno-shrink-wrap-separate
        condition: $( contains(${nuclei_archext}, "zc"))
    ldflags:
      - flags: -Wl,--no-warn-rwx-segments
      - flags: -lc_nano -lgcc
        condition: $( ${stdclib} == "newlib_nano" )
      - flags: -lsemihost
        condition: $( startswith(${stdclib}, "newlib") && ${semihost} == 1 )
      - flags: -u _isatty -u _write -u _sbrk -u _read -u _close -u _fstat -u _lseek -u errno
        condition: $( startswith(${stdclib}, "newlib") )

  - type: clang
    description: Nuclei LLVM Toolchain
    toolchain_name: RISC-V Clang/Newlib
    cross_prefix: riscv64-unknown-elf- # optional
    common_flags: # flags need to be combined together across all packages
    ldflags:
      - flags: -fuse-ld=lld
      - flags: -u __on_exit_args
        condition: $( startswith(${stdclib}, "newlib") )
      # for clang, newlib_nano still need to define symbol _printf_float to make link pass
      - flags: -lc_nano -lgcc -u _printf_float
        condition: $( ${stdclib} == "newlib_nano" )
      - flags: -lsemihost
        condition: $( startswith(${stdclib}, "newlib") && ${semihost} == 1 )
