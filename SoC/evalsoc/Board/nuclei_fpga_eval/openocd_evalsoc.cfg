# please use >= 2022.08 openocd
# some commands are changed to match latest openocd changes
adapter speed 1000

adapter driver ftdi
ftdi vid_pid 0x0403 0x6010
# for 2023.10 openocd, change oscan1_mode to nscan1_mode
ftdi oscan1_mode off

## bindto 0.0.0.0 can be used to cover all available interfaces.
## Uncomment bindto line to enable remote machine debug
# bindto 0.0.0.0

## If ftdi device_desc not specified, the device description is ignored during device selection.
## So if you want to specify a dedicated FTDI device, you can select following device description:
## "Dual RS232-HS" is for Nuclei HummingBird Debugger V1
## "USB <-> JTAG-DEBUGGER" is for Nuclei HummingBird Debugger V2
## Uncomment one which match your device description
# ftdi device_desc "Dual RS232-HS"
# ftdi device_desc "USB <-> JTAG-DEBUGGER"
# you can also specify adapter serial to select a ftdi chip
# adapter serial "FT6S9RD6"

# Bind JTAG with specified serial number passed by JTAGSN
if { [ info exists JTAGSN ] } {
    puts "Bind JTAG with serial number $JTAGSN"
    adapter serial $JTAGSN
}

transport select jtag

ftdi layout_init 0x0008 0x001b
ftdi layout_signal nSRST -oe 0x0020 -data 0x0020
ftdi layout_signal TCK -data 0x0001
ftdi layout_signal TDI -data 0x0002
ftdi layout_signal TDO -input 0x0004
ftdi layout_signal TMS -data 0x0008
ftdi layout_signal JTAG_SEL -data 0x0100 -oe 0x0100

# Create JTAG chain
set _CHIPNAME riscv
jtag newtap $_CHIPNAME cpu -irlen 5

set _TARGETNAME $_CHIPNAME.cpu
set _BOOTHARTNAME $_TARGETNAME

set _smp_command ""
# if NOFLASH variable exist or passed by openocd command
# will not probe flash device
set _noflash [ info exists NOFLASH ]

if { [ info exists SMP ] } {
    puts "SMP CPU count expected to be $SMP"
    set CORECNT $SMP
} else {
    puts "Set default SMP CPU count to default 1"
    set CORECNT 1
}

if { [ info exists BOOT_HARTID ] } {
    puts "boot hart id expected to be $BOOT_HARTID"
    set BOOTHART $BOOT_HARTID
} else {
    puts "Set boot hart id to default 0"
    set BOOTHART 0
}

if { $CORECNT > 1 } {
    set _BOOTHARTNAME $_TARGETNAME.$BOOTHART
    for { set _core 0 } { $_core < $CORECNT } { incr _core } {
        set _command "target create $_TARGETNAME.$_core riscv -chain-position $_TARGETNAME"
        if { $_core == 0 } {
            set _command "$_command -rtos hwthread"
            set _smp_command "target smp $_TARGETNAME.$_core"
        } else {
            set _command "$_command -coreid $_core"
            set _smp_command "$_smp_command $_TARGETNAME.$_core"
        }
        # do target create for each cpu
        eval $_command
    }
    # do target smp for all cpus
    eval $_smp_command
} else {
    # create a single hart target with coreid = $BOOTHART
    target create $_TARGETNAME riscv -chain-position $_TARGETNAME -coreid $BOOTHART
}

$_BOOTHARTNAME configure -work-area-phys 0x80000000 -work-area-size 10000 -work-area-backup 1

if { $_noflash == 0 } {
    set _FLASHNAME $_CHIPNAME.flash
    flash bank $_FLASHNAME nuspi 0x20000000 0 0 0 $_BOOTHARTNAME
}

# Expose Nuclei self-defined CSRS
# See https://github.com/riscv/riscv-gnu-toolchain/issues/319#issuecomment-358397306
# Then user can view the csr register value in gdb using: info reg csr775 for CSR MTVT(0x307)
# No need to expose it now for openocd >= 2022.01
# riscv expose_csrs 416-496,770-800,835-850,1227-1231,1483-1486,1984-2040,2064-2070,2370-2380,2490-2500,4032-4040

init

if { [ info exists pulse_srst ] } {
  ftdi set_signal nSRST 0
  ftdi set_signal nSRST z
}

halt

# We must turn on this because otherwise the IDE version debug cannot download the program into flash
if { $_noflash == 0 } {
    flash protect 0 0 last off
}

arm semihosting enable
