## NUCLEI RISCV GCC COMPILER
## NUCLEI RISCV OPENOCD
#
#!< Nuclei SDK Tools Root
COMPILE_PREFIX ?= riscv-nuclei-elf-
NUCLEI_SDK_TOOL_ROOT ?= $(NUCLEI_SDK_ROOT)/prebuilt_tools
NUCLEI_RISCV_GCC_ROOT ?= $(NUCLEI_SDK_TOOL_ROOT)/gcc
NUCLEI_OPENOCD_ROOT ?= $(NUCLEI_SDK_TOOL_ROOT)/openocd

NUCLEI_SDK_TOOL_ROOT_EXIST = 0
ifneq ($(wildcard $(NUCLEI_RISCV_GCC_ROOT)),)
ifneq ($(wildcard $(NUCLEI_OPENOCD_ROOT)),)
NUCLEI_SDK_TOOL_ROOT_EXIST = 1
endif
endif

ifeq ($(NUCLEI_SDK_TOOL_ROOT_EXIST),1)
CC      := $(abspath $(NUCLEI_RISCV_GCC_ROOT)/bin/$(COMPILE_PREFIX)gcc)
CXX     := $(abspath $(NUCLEI_RISCV_GCC_ROOT)/bin/$(COMPILE_PREFIX)g++)
OBJDUMP := $(abspath $(NUCLEI_RISCV_GCC_ROOT)/bin/$(COMPILE_PREFIX)objdump)
OBJCOPY := $(abspath $(NUCLEI_RISCV_GCC_ROOT)/bin/$(COMPILE_PREFIX)objcopy)
GDB     := $(abspath $(NUCLEI_RISCV_GCC_ROOT)/bin/$(COMPILE_PREFIX)gdb)
AR      := $(abspath $(NUCLEI_RISCV_GCC_ROOT)/bin/$(COMPILE_PREFIX)ar)
SIZE    := $(abspath $(NUCLEI_RISCV_GCC_ROOT)/bin/$(COMPILE_PREFIX)size)
OPENOCD := $(abspath $(NUCLEI_OPENOCD_ROOT)/bin/openocd)
else
CC      := $(COMPILE_PREFIX)gcc
CXX     := $(COMPILE_PREFIX)g++
OBJDUMP := $(COMPILE_PREFIX)objdump
OBJCOPY := $(COMPILE_PREFIX)objcopy
GDB     := $(COMPILE_PREFIX)gdb
AR      := $(COMPILE_PREFIX)ar
SIZE    := $(COMPILE_PREFIX)size
OPENOCD := openocd
endif

XLSPIKE := xl_spike

# Overwrite NEWLIB when STDCLIB is defined
ifdef STDCLIB
override NEWLIB := $(STDCLIB)
endif

include $(NUCLEI_SDK_BUILD)/Makefile.files
include $(NUCLEI_SDK_NMSIS)/build.mk
include $(NUCLEI_SDK_BUILD)/Makefile.soc

# Set your remote bitbang port
RBB_PORT ?= 9824
# Set your GDB port using variable GDB_PORT
GDB_PORT ?= 3333
## Makefile Variable GDBREMOTE
# You can change GDBREMOTE to other gdb remotes
## eg. if you have started openocd server with (bindto 0.0.0.0 defined in openocd.cfg)
## make sure your machine can connect to remote machine
## in remote machine(ipaddr 192.168.43.199, port 3333) which connect the hardware board,
## then you can change the GDBREMOTE to 192.168.43.199:3333
## GDBREMOTE ?= 192.168.43.199:3333
GDBREMOTE ?= | $(OPENOCD) $(OPENOCD_OPT) -c \"$(OPENOCD_CMD_ARGS); gdb_port pipe; log_output openocd.log\" -f $(OPENOCD_CFG)

GDB_UPLOAD_ARGS ?= --batch
GDB_UPLOAD_CMDS += -ex 'thread apply all monitor reset halt'
GDB_UPLOAD_CMDS += -ex 'thread apply all info reg pc'
GDB_UPLOAD_CMDS += -ex 'thread 1'
GDB_UPLOAD_CMDS += -ex 'load $<'
GDB_UPLOAD_CMDS += -ex 'file $<'
# $$pc is for $pc in gdb, but need to do this in makefile
# please make sure the _start label is provided in your startup code
# and is the entry of the startup of cpu
# make sure pc is set to _start after load
# when load program to flash, the cpu will do reset init
# before flash erase and do reset halt after flash write end
# so we need to manually set pc to _start
# see https://openocd.org/doc/html/CPU-Configuration.html#Target-Events
GDB_UPLOAD_CMDS += -ex 'thread apply all set $$pc=_start'
GDB_UPLOAD_CMDS += -ex 'thread apply all info reg pc'
GDB_UPLOAD_CMDS += -ex 'thread 1'
GDB_UPLOAD_CMDS += -ex 'monitor resume'
GDB_UPLOAD_CMDS += -ex 'quit'

OPENOCD_PORT_ARGS = -c "$(OPENOCD_CMD_ARGS); gdb_port $(GDB_PORT)"

OPENOCD_ARGS += $(OPENOCD_OPT) -f $(OPENOCD_CFG)
GDB_CMDS += -ex "set remotetimeout 240"
GDB_CMDS += -ex "target extended-remote localhost:$(GDB_PORT)"

DOWNLOAD_UPPER = $(call uc, $(DOWNLOAD))

DEFAULT_RISCV_ARCH ?= rv32imac
DEFAULT_RISCV_ABI ?= ilp32

ifeq ($(RISCV_ARCH),)
$(warning RISCV_ARCH is not defined, use $(DEFAULT_RISCV_ARCH) as default)
RISCV_ARCH := $(DEFAULT_RISCV_ARCH)
endif
ifeq ($(RISCV_ABI),)
$(warning RISCV_ABI is not defined, use $(DEFAULT_RISCV_ABI) as default)
RISCV_ABI := $(DEFAULT_RISCV_ABI)
endif

# Set default RISC_CMODEL=medlow for rv32, otherwise medany
ifeq ($(RISCV_CMODEL),)
ifneq ($(findstring 32,$(RISCV_ABI)),)
override RISCV_CMODEL := medlow
else
override RISCV_CMODEL := medany
endif
endif

# QEMU settings
ifneq ($(findstring 32,$(RISCV_ABI)),)
QEMU := qemu-system-riscv32
else
QEMU := qemu-system-riscv64
endif

MKDEP_OPT = -MMD -MT $@ -MF $@.d
C_INCLUDE_OPT = $(foreach dir,$(sort $(INCDIRS) $(C_INCDIRS)),-I$(dir))
CXX_INCLUDE_OPT = $(foreach dir,$(sort $(INCDIRS) $(CXX_INCDIRS)),-I$(dir))
ASM_INCLUDE_OPT = $(foreach dir,$(sort $(INCDIRS) $(ASM_INCDIRS)),-I$(dir))

ifeq ($(NOGC),1)
GC_CFLAGS =
GC_LDFLAGS =
else
GC_CFLAGS = -ffunction-sections -fdata-sections
GC_LDFLAGS = -Wl,--gc-sections -Wl,--check-sections
endif

ifeq ($(SIMULATION),1)
COMMON_FLAGS += -DCFG_SIMULATION
endif

ifeq ($(BANNER),0)
COMMON_FLAGS += -DNUCLEI_BANNER=0
endif

# Handle standard c library selection variable STDCLIB
ifneq ($(findstring newlib,$(STDCLIB)),)
LDLIBS += -lstdc++
### Handle cases when STDCLIB variable has newlib in it
ifeq ($(STDCLIB),newlib_full)
COMMON_FLAGS +=
else ifeq ($(STDCLIB),newlib_fast)
COMMON_FLAGS += --specs=nano.specs
STDCLIB_LDFLAGS += -u _printf_float -u _scanf_float
else ifeq ($(STDCLIB),newlib_small)
COMMON_FLAGS += --specs=nano.specs
STDCLIB_LDFLAGS += -u _printf_float
else ifeq ($(STDCLIB),newlib_nano)
COMMON_FLAGS += --specs=nano.specs
else
COMMON_FLAGS +=
endif
###
else ifneq ($(findstring libncrt,$(STDCLIB)),)
### Handle cases when STDCLIB variable has libncrt in it
COMMON_FLAGS += --specs=$(STDCLIB).specs
###
else ifeq ($(STDCLIB),nostd)
### Handle cases when no standard system directories for header files
COMMON_FLAGS += -nostdinc
###
else ifeq ($(STDCLIB),nospec)
### Handle cases no specs configs are passed
COMMON_FLAGS +=
###
else
LDLIBS += -lstdc++
### To be back compatiable with NEWLIB and PFLOAT variable
ifeq ($(NEWLIB),nano)
STDCLIB_LDFLAGS = --specs=nano.specs
ifeq ($(PFLOAT),1)
STDCLIB_LDFLAGS += -u _printf_float
endif
else
STDCLIB_LDFLAGS +=
endif
###
endif

ifneq ($(SEMIHOST),)
LDLIBS += -lsemihost
endif

## Heap and stack size settings
## It will define symbols only used in linker script
## __STACK_SIZE and __HEAP_SIZE are not a c marco
## they are ld symbols used by linker
ifneq ($(STACKSZ),)
LDFLAGS += -Wl,--defsym=__STACK_SIZE=$(STACKSZ)
endif
ifneq ($(HEAPSZ),)
LDFLAGS += -Wl,--defsym=__HEAP_SIZE=$(HEAPSZ)
endif

## SIMU=xlspike/qemu
### enable run on xlspike and qemu auto-exit if return from main
ifneq ($(SIMU),)
SIMULATION_MODE=SIMULATION_MODE_$(call uc, $(SIMU))
COMMON_FLAGS += -DSIMULATION_MODE=$(SIMULATION_MODE)
endif

## QEMU/XLSPIKE options
QEMU_OPT += -icount shift=0

COMMON_FLAGS += -g
COMMON_FLAGS += -march=$(RISCV_ARCH) -mabi=$(RISCV_ABI) -mcmodel=$(RISCV_CMODEL)
## Append mtune options when RISCV_TUNE is defined
## It might be defined in SoC/<SOC>/build.mk, and can be overwritten by make
ifneq ($(RISCV_TUNE),)
COMMON_FLAGS += -mtune=$(RISCV_TUNE)
endif

COMMON_FLAGS += $(APP_COMMON_FLAGS) $(GC_CFLAGS) -fno-common \
	-DDOWNLOAD_MODE=DOWNLOAD_MODE_$(DOWNLOAD_UPPER) \
	-DDOWNLOAD_MODE_STRING=\"$(DOWNLOAD_UPPER)\"

CFLAGS += $(COMMON_FLAGS) $(APP_CFLAGS) $(C_INCLUDE_OPT)
CXXFLAGS += $(COMMON_FLAGS) $(APP_CXXFLAGS) $(CXX_INCLUDE_OPT)
ASMFLAGS += -x assembler-with-cpp $(COMMON_FLAGS) $(APP_ASMFLAGS) $(ASM_INCLUDE_OPT)

LIB_OPT = $(addprefix -L, $(sort $(LIBDIRS)))

LDFLAGS += -T $(LINKER_SCRIPT) -nostartfiles -Wl,-Map=$(TARGET).map \
		$(APP_LDFLAGS) $(GC_LDFLAGS) $(STDCLIB_LDFLAGS) \
		$(LIB_OPT) -Wl,--start-group $(LDLIBS) -Wl,--end-group

ifneq ($(findstring newlib,$(STDCLIB)),)
LDFLAGS += -u _isatty -u _write -u _sbrk -u _read -u _close -u _fstat -u _lseek
endif

# Include RTOS and Components Makefiles
include $(NUCLEI_SDK_BUILD)/Makefile.rtos
include $(NUCLEI_SDK_BUILD)/Makefile.components

# Prerequesties
MAKEFILE_PREREQS += $(NUCLEI_SDK_BUILD)/Makefile.base
MAKEFILE_PREREQS += $(NUCLEI_SDK_BUILD)/Makefile.soc
MAKEFILE_PREREQS += $(NUCLEI_SDK_BUILD)/Makefile.conf
MAKEFILE_PREREQS += $(NUCLEI_SDK_BUILD)/Makefile.core
MAKEFILE_PREREQS += $(NUCLEI_SDK_BUILD)/Makefile.files
MAKEFILE_PREREQS += $(NUCLEI_SDK_BUILD)/Makefile.misc
MAKEFILE_PREREQS += $(NUCLEI_SDK_BUILD)/Makefile.rules
MAKEFILE_PREREQS += $(EXTRA_MKS)
MAKEFILE_PREREQS += Makefile

LINK_PREREQS += $(LINKER_SCRIPT)

COMMON_PREREQS = $(MAKEFILE_PREREQS) $(LINK_PREREQS)
