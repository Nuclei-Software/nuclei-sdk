variables:
  DOC_SERVER: doc
  GIT_DEPTH: "3"
  DOC_CENTER: /home/xl_ci/doc_center
  SHAREENVLOC: /home/share/devtools
  IMAGE: rego.corp.nucleisys.com/software/sdkbuild
  IMAGE_TAG: "2024.01.09"
  JOBCTRL: "RUN"

workflow:
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /draft|wip|stash/i
      when: never
    - if: $CI_COMMIT_BRANCH =~ /master|develop|feature/
    - if: $CI_COMMIT_BRANCH == "master" && $CI_COMMIT_TAG
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /master|develop/ && $CI_PIPELINE_SOURCE == "merge_request_event"

default:
  tags:
    - env::docker
    - net::outside
  image: $IMAGE:$IMAGE_TAG

stages:
  - build
  - deploy

## Job for build document
build_doc:
  stage: build
  interruptible: true
  only:
    changes:
      - doc/**/**/**/*
      - .gitlab-ci.yml
  retry: 1
  artifacts:
    name: "nuclei_sdk_doc-job${CI_JOB_ID}-${CI_COMMIT_SHA::8}"
    paths:
      - doc/build
    expire_in: 2 day
  before_script:
    - apt update
    - apt install -y lftp python3 make latexmk texlive-base texlive-latex-extra python3-pip
    - pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
    - python3 -m pip install --upgrade pip
    - pip3 install -r doc/requirements.txt
  script:
    - cd doc
    - make clean
    - make all
    - make latexpdf
    - cp build/latex/*.pdf build/html/

## Job for deploy document to internal server
deploy_doc:
  stage: deploy
  when: on_success
  retry: 1
  only:
    refs:
      - master
    changes:
      - doc/**/**/**/**/*
      - .gitlab-ci.yml
  script:
    - ssh $DOC_SERVER "rm -rf $DOC_CENTER/nuclei_sdk/*"
    - ssh $DOC_SERVER "mkdir -p $DOC_CENTER/nuclei_sdk/"
    - cd doc/build
    - scp -r html $DOC_SERVER:$DOC_CENTER/nuclei_sdk
  dependencies:
    - build_doc
  tags:
    - env::native
    - host::whss1

## Job for deploy document to nuclei website
deploy_website:
  stage: deploy
  when: on_success
  retry: 1
  only:
    refs:
      - master
    changes:
      - doc/**/**/**/**/*
  script:
    - ./.ci/ftp_deploy.sh $FTPUSER $FTPPWD $FTPSERVER doc/build/html nuclei_sdk
  dependencies:
    - build_doc
  tags:
    - env::native
    - host::whss1

## Job template
.job_template: &job_template_default
  image: $IMAGE:$IMAGE_TAG
  interruptible: true
  stage: build
  before_script:
    - apt update
    # install libncursesw5 for ubuntu 20.04 and later for libtinfo.so.5 missing
    - apt install -y python3 make python3-pip libncursesw5
    - pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
    - python3 -m pip install --upgrade pip
    - pip3 install -r tools/scripts/requirements.txt
    - which riscv64-unknown-elf-gcc && riscv64-unknown-elf-gcc --version
    - which riscv64-unknown-elf-clang && riscv64-unknown-elf-clang --version
    - which qemu-system-riscv32 && qemu-system-riscv32 --version
    - which make && make --version
    - which python3 && python3 --version
    # CI_JOB_NAME_SLUG is introduced >=15.4 gitlab release
    - export CI_JOB_NAME_SHORT=${CI_JOB_NAME/[\[ :\/ ]*}
    - echo "CI_JOB_NAME_SHORT=${CI_JOB_NAME_SHORT}"
  artifacts:
    when: always
    name: "nsdkcli_logs-job${CI_JOB_ID}-${CI_COMMIT_SHA::8}"
    paths:
      - logs
    expire_in: 2 day

.job_ctrl_template: &job_ctrl_template_default
  <<: *job_template_default
  rules:
    - if: $JOBCTRL == "RUN"

build_evalsoc:
  <<: *job_template_default
  variables:
    APPCFG: tools/scripts/nsdk_cli/configs/application.json
    HWCFG: tools/scripts/nsdk_cli/configs/nuclei_fpga_eval_ci.json
  parallel:
    matrix:
      - DOWNLOAD: [ "ilm", "flashxip" ]
        ARCH_EXT: [ "", "_zca_zcb_zcmp_zcmt" ]
        STDCLIB: ["newlib_small", "libncrt_small"]
  script:
    - export LOGDIR=logs/${CI_JOB_NAME_SHORT}/${STDCLIB}_${DOWNLOAD}${ARCH_EXT}
    - python3 tools/scripts/nsdk_cli/nsdk_bench.py --appcfg $APPCFG --hwcfg $HWCFG --parallel="-j" --logdir $LOGDIR --make_options "STDCLIB=$STDCLIB DOWNLOAD=$DOWNLOAD ARCH_EXT=${ARCH_EXT}"

      #run_newlib_nano_evalsoc:
      #  <<: *job_template_default
      #  timeout: 5h
      #  variables:
      #    APPCFG: tools/scripts/nsdk_cli/configs/application.json
      #    RUNTARGET: qemu
      #  parallel:
      #    matrix:
      #      - HWCFG:
      #        - tools/scripts/nsdk_cli/configs/nuclei_fpga_eval_ci_qemu.json
      #  script:
      #    - export LOGDIR=logs/${CI_JOB_NAME_SHORT}/$(basename ${HWCFG%.json})
      #    - python3 tools/scripts/nsdk_cli/nsdk_bench.py --appcfg $APPCFG --hwcfg $HWCFG --parallel="-j" --logdir $LOGDIR --run --run_target $RUNTARGET
      #
      #run_libncrt_evalsoc:
      #  <<: *job_template_default
      #  timeout: 4h
      #  variables:
      #    APPCFG: tools/scripts/nsdk_cli/configs/application.json
      #    HWCFG: tools/scripts/nsdk_cli/configs/nuclei_fpga_eval_ci_libncrt.json
      #    RUNTARGET: qemu
      #  parallel:
      #    matrix:
      #      - STDCLIB:
      #        - libncrt_small
      #        - libncrt_fast
      #        - libncrt_balanced
      #  script:
      #    - export LOGDIR=logs/${CI_JOB_NAME_SHORT}/$(basename ${HWCFG%.json})
      #    - python3 tools/scripts/nsdk_cli/nsdk_bench.py --appcfg $APPCFG --hwcfg $HWCFG --parallel="-j" --logdir $LOGDIR --run --run_target $RUNTARGET --make_options "STDCLIB=$STDCLIB"
      #
